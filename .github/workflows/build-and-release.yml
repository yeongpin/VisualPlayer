name: Build and Release VisualPlayer

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}
      should_build: ${{ steps.check_tag.outputs.should_build }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: v$VERSION"
      
      - name: Check if release exists and has assets
        id: check_tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Check if release exists and has assets
          RELEASE_EXISTS=false
          HAS_ASSETS=false
          
          # Try to get release info
          if gh release view "$VERSION" >/dev/null 2>&1; then
            RELEASE_EXISTS=true
            echo "Release $VERSION exists"
            
            # Check if release has assets
            ASSET_COUNT=$(gh release view "$VERSION" --json assets --jq '.assets | length')
            if [ "$ASSET_COUNT" -gt 0 ]; then
              HAS_ASSETS=true
              echo "Release $VERSION has $ASSET_COUNT assets"
            else
              echo "Release $VERSION exists but has no assets"
            fi
          else
            echo "Release $VERSION does not exist"
          fi
          
          # Decide whether to build
          if [ "$RELEASE_EXISTS" = true ] && [ "$HAS_ASSETS" = true ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Release $VERSION already exists with assets, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
            if [ "$RELEASE_EXISTS" = true ]; then
              echo "Release $VERSION exists but has no assets, will rebuild"
            else
              echo "Release $VERSION does not exist, will create and build"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-tag:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_build == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push tag
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping tag creation"
          else
            git tag -a "$VERSION" -m "Release $VERSION"
            git push origin "$VERSION"
            echo "Created and pushed tag: $VERSION"
          fi

  build:
    needs: [check-version, create-tag]
    runs-on: ${{ matrix.os }}
    if: needs.check-version.outputs.should_build == 'true'
    
    strategy:
      matrix:
        os: [windows-latest]
        arch: [x64]
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ matrix.arch }}
          cache: 'npm'
      
      - name: Set version environment
        run: echo "VERSION=${{ needs.check-version.outputs.version }}" >> $GITHUB_ENV
        shell: bash

      # Download and extract FFmpeg files
      - name: Download FFmpeg
        run: |
          echo "Downloading FFmpeg files..."
          curl -L -o external.rar "https://github.com/yeongpin/VisualPlayer/releases/download/ffmpeg/external.rar"
          echo "FFmpeg downloaded successfully"
        shell: bash
        
      # Extract FFmpeg files (Windows only)
      - name: Extract FFmpeg
        run: |
          echo "Extracting FFmpeg files for Windows..."
          # Install 7zip via chocolatey
          choco install 7zip -y
          # Extract using 7zip
          7z x external.rar -y
          echo "FFmpeg extraction completed"
          dir external\ || echo "External directory not found"
        shell: cmd

      # Install dependencies
      - name: Install Dependencies
        run: npm ci
        
      # Build the application
      - name: Build Application
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCH: ${{ matrix.arch }}
          # macOS signing and notarization (optional)
          CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-builder
          
      # List dist directory contents for debugging
      - name: List dist directory
        shell: cmd
        run: |
          echo Dist directory contents:
          dir dist\ || echo "No dist directory found"
          echo.
          echo External directory size:
          dir external\ /s || echo "No external directory found"
          echo.
          echo Total project size before build:
          dir . /s | findstr "bytes"
        
      # Rename and organize artifacts (Windows only)
      - name: Process Artifacts
        shell: cmd
        run: |
          mkdir artifacts
          set VERSION_NUM=%VERSION:~1%
          
          REM Windows artifacts
          for %%f in (dist\*.exe) do copy "%%f" "artifacts\VisualPlayer_%VERSION_NUM%_win_x64_setup.exe"
          for %%f in (dist\*.msi) do copy "%%f" "artifacts\VisualPlayer_%VERSION_NUM%_win_x64.msi"
          for %%f in (dist\*.zip) do copy "%%f" "artifacts\VisualPlayer_%VERSION_NUM%_win_x64_portable.zip"
          
          REM Show artifacts directory contents for verification
          echo Artifacts directory contents:
          dir artifacts\
        
      # Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: artifacts/*
          retention-days: 1
          
  release:
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_build == 'true'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: List Downloaded Files
        run: |
          echo "Downloaded artifacts:"
          ls -R artifacts/
        
      - name: Get Changelog for Version
        id: changelog
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          VERSION_NUM=$(echo "$VERSION" | sed 's/^v//')
          
          # Extract changelog for current version from changelog.json
          if [ -f "public/changelog.json" ]; then
            CHANGELOG=$(node -e "
              const fs = require('fs');
              const changelog = JSON.parse(fs.readFileSync('public/changelog.json', 'utf8'));
              const version = changelog.versions.find(v => v.version === 'v${VERSION_NUM}-Beta');
              if (version) {
                let output = '## ðŸš€ ' + version.version + ' (' + version.date + ')\\n\\n';
                version.changes.forEach(change => {
                  output += '- ' + change.description + '\\n';
                });
                console.log(output);
              } else {
                console.log('## ðŸš€ ${VERSION}\\n\\nNew release of VisualPlayer');
              }
            ")
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=## ðŸš€ $VERSION\n\nNew release of VisualPlayer" >> $GITHUB_OUTPUT
          fi
        
      - name: Delete existing release if exists
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          # Try to delete existing release (will fail silently if not exists)
          gh release delete "$VERSION" --yes || echo "Release $VERSION does not exist, proceeding with creation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.version }}
          name: VisualPlayer ${{ needs.check-version.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 